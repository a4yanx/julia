# .github/workflows/julia-testing.yml
name: Julia Testing

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      coverage:
        description: 'Run code coverage'
        type: boolean
        default: true

env:
  JULIA_NUM_THREADS: auto

jobs:
  test:
    name: Test Julia ${{ matrix.version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        version: ['1.6', '1.10', 'nightly']
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          - version: nightly
            os: windows-latest
          - version: nightly  
            os: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: julia-actions/setup-julia@v2
      with:
        version: ${{ matrix.version }}
    
    - uses: julia-actions/cache@v2
    
    - name: Install Dependencies
      uses: julia-actions/julia-buildpkg@v1
    
    - name: Run Tests
      uses: julia-actions/julia-runtest@v1
      with:
        annotate: true
    
    - name: Process Coverage
      if: matrix.version == '1.10' && matrix.os == 'ubuntu-latest' && (github.event_name == 'push' || inputs.coverage)
      uses: julia-actions/julia-processcoverage@v1
    
    - name: Upload Coverage
      if: matrix.version == '1.10' && matrix.os == 'ubuntu-latest' && (github.event_name == 'push' || inputs.coverage)
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: julia-actions/setup-julia@v2
      with:
        version: '1.10'
    
    - name: Check Formatting
      run: |
        julia -e '
        using Pkg
        Pkg.add("JuliaFormatter")
        using JuliaFormatter
        
        formatted = format(".", verbose=true, overwrite=false)
        if !formatted
            println("Code formatting issues found. Run JuliaFormatter.jl to fix.")
            exit(1)
        else
            println("Code formatting is correct.")
        end
        '

  lint:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: julia-actions/setup-julia@v2
      with:
        version: '1.10'
    
    - name: Run Linter
      run: |
        julia -e '
        using Pkg
        Pkg.add(["StaticLint", "LanguageServer"])
        using StaticLint
        
        function lint_files()
            issues = []
            for (root, dirs, files) in walkdir(".")
                if occursin(".git", root) || occursin("Manifest.toml", root)
                    continue
                end
                for file in files
                    if endswith(file, ".jl")
                        filepath = joinpath(root, file)
                        try
                            content = read(filepath, String)
                            # Basic syntax validation
                            try
                                Meta.parse(content)
                                println("PASS: $filepath")
                            catch e
                                println("FAIL: $filepath - $e")
                                push!(issues, filepath)
                            end
                        catch e
                            println("ERROR: Cannot read $filepath - $e")
                            push!(issues, filepath)
                        end
                    end
                end
            end
            return length(issues) == 0
        end
        
        if !lint_files()
            println("Linting issues found.")
            exit(1)
        end
        '

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - uses: julia-actions/setup-julia@v2
      with:
        version: '1.10'
    
    - uses: julia-actions/cache@v2
    
    - name: Install Dependencies
      uses: julia-actions/julia-buildpkg@v1
    
    - name: Build Documentation
      run: |
        julia --project=docs -e '
        using Pkg
        if isfile("docs/Project.toml")
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()
        else
            println("No docs environment found, skipping documentation build")
            exit(0)
        end
        
        if isfile("docs/make.jl")
            include("docs/make.jl")
        else
            println("No docs/make.jl found, skipping documentation build")
        end
        '

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - uses: julia-actions/setup-julia@v2
      with:
        version: '1.10'
    
    - uses: julia-actions/cache@v2
    
    - name: Install Dependencies
      uses: julia-actions/julia-buildpkg@v1
    
    - name: Run Benchmarks
      run: |
        julia -e '
        using Pkg
        
        # Check if benchmark directory exists
        if isdir("benchmark")
            try
                Pkg.add("BenchmarkTools")
                println("Running benchmarks...")
                
                # Simple benchmark runner
                benchmark_files = filter(f -> endswith(f, ".jl"), readdir("benchmark", join=true))
                
                if isempty(benchmark_files)
                    println("No benchmark files found in benchmark/ directory")
                    exit(0)
                end
                
                for bench_file in benchmark_files
                    println("Running benchmark: $bench_file")
                    try
                        include(bench_file)
                    catch e
                        println("Benchmark failed: $e")
                    end
                end
                
            catch e
                println("Benchmark execution failed: $e")
                exit(1)
            end
        else
            println("No benchmark directory found, skipping benchmarks")
        end
        '

  validate-project:
    name: Project Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Project Structure
      run: |
        # Validate Julia package structure
        if [[ ! -f "Project.toml" ]]; then
          echo "ERROR: Project.toml not found"
          exit 1
        fi
        
        # Check if this is a package (has src/) or script collection
        if [[ -d "src" ]]; then
          echo "Detected Julia package structure"
          
          # Validate package structure
          if [[ ! -f "src/$(basename $PWD).jl" ]] && [[ ! -f "src/$(grep -o 'name = ".*"' Project.toml | cut -d'"' -f2).jl" ]]; then
            echo "WARNING: Main module file not found in src/"
          fi
          
          if [[ -d "test" ]] && [[ ! -f "test/runtests.jl" ]]; then
            echo "WARNING: test/runtests.jl not found"
          fi
        else
          echo "Detected Julia script collection"
        fi
        
        # Validate Project.toml syntax
        julia -e '
        using Pkg
        try
            project = Pkg.TOML.parsefile("Project.toml")
            println("Project.toml is valid")
            
            if haskey(project, "name")
                println("Package name: $(project["name"])")
            end
            
            if haskey(project, "version")
                println("Version: $(project["version"])")
            end
            
        catch e
            println("ERROR: Invalid Project.toml - $e")
            exit(1)
        end
        '

  report:
    name: Generate Report  
    if: always()
    needs: [test, format-check, lint, validate-project]
    runs-on: ubuntu-latest
    steps:
    - name: Generate Test Report
      run: |
        cat > test_report.md << 'EOF'
        # Julia Testing Report
        
        ## Test Results
        - Tests: ${{ needs.test.result }}
        - Format Check: ${{ needs.format-check.result }}
        - Static Analysis: ${{ needs.lint.result }}
        - Project Validation: ${{ needs.validate-project.result }}
        
        ## Summary
        EOF
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.format-check.result }}" == "success" && "${{ needs.lint.result }}" == "success" ]]; then
          echo "All checks passed successfully." >> test_report.md
        else
          echo "Some checks failed. Please review the logs above." >> test_report.md
        fi
        
    - name: Upload Report
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test_report.md
    
    - name: Comment PR
      if: github.event_name == 'pull_request' && (needs.test.result != 'success' || needs.format-check.result != 'success' || needs.lint.result != 'success')
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('test_report.md', 'utf8');
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });