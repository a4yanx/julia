# .github/workflows/julia-core-testing.yml
name: Julia Core Testing

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'basic'
        type: choice
        options:
        - basic
        - full
        - benchmarks

env:
  JULIA_NUM_THREADS: auto
  OPENBLAS_NUM_THREADS: 8

jobs:
  validate-core:
    name: Validate Julia Core Structure
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.info.outputs.version }}
      has_changes: ${{ steps.changes.outputs.has_changes }}
      build_required: ${{ steps.changes.outputs.build_required }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Validate Core Structure
      run: |
        required_dirs=("base" "src" "stdlib" "test" "deps")
        required_files=("Makefile" "VERSION")
        
        for dir in "${required_dirs[@]}"; do
          if [[ ! -d "$dir" ]]; then
            echo "ERROR: Required directory $dir not found"
            exit 1
          fi
          echo "Found: $dir/ ($(find $dir -name "*.jl" | wc -l) .jl files)"
        done
        
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "ERROR: Required file $file not found"  
            exit 1
          fi
          echo "Found: $file"
        done
    
    - name: Extract Version Info
      id: info
      run: |
        if [[ -f "VERSION" ]]; then
          version=$(cat VERSION | tr -d '\n')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Julia version: $version"
        else
          echo "version=unknown" >> $GITHUB_OUTPUT
        fi
    
    - name: Detect Changes
      id: changes
      run: |
        # Check what changed in the last commit
        if git diff HEAD~1 --name-only | grep -E "(src/|base/|stdlib/)" > /dev/null; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "build_required=true" >> $GITHUB_OUTPUT
          echo "Core changes detected - full rebuild required"
        elif git diff HEAD~1 --name-only | grep -E "(test/|contrib/)" > /dev/null; then
          echo "has_changes=true" >> $GITHUB_OUTPUT  
          echo "build_required=false" >> $GITHUB_OUTPUT
          echo "Test-only changes detected"
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "build_required=false" >> $GITHUB_OUTPUT
          echo "No significant changes detected"
        fi

  build-julia:
    name: Build Julia Core
    needs: validate-core
    runs-on: ${{ matrix.os }}
    if: needs.validate-core.outputs.build_required == 'true' || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64]
        include:
        - os: ubuntu-latest
          make_flags: "USE_BINARYBUILDER=0"
        - os: macos-latest
          make_flags: "USE_BINARYBUILDER=0"
        - os: windows-latest
          make_flags: ""
    timeout-minutes: 120
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Build Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libatomic1 python3 gfortran perl wget m4 cmake pkg-config curl
        sudo apt-get install -y git ca-certificates
    
    - name: Setup Build Dependencies (macOS)  
      if: matrix.os == 'macos-latest'
      run: |
        brew install gcc gfortran cmake
    
    - name: Setup Build Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: >-
          base-devel
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-python3
    
    - name: Build Julia (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "Building Julia with flags: ${{ matrix.make_flags }}"
        make -j$(nproc) ${{ matrix.make_flags }}
        echo "Build completed"
        ./julia --version
    
    - name: Build Julia (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        make -j$(nproc) ${{ matrix.make_flags }}
        ./julia.exe --version
    
    - name: Create Build Archive
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          tar -czf julia-build-${{ matrix.os }}-${{ matrix.arch }}.tar.gz julia.exe usr/ etc/
        else
          tar -czf julia-build-${{ matrix.os }}-${{ matrix.arch }}.tar.gz julia usr/ etc/
        fi
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: julia-build-${{ matrix.os }}-${{ matrix.arch }}
        path: julia-build-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
        retention-days: 7

  test-core:
    name: Test Julia Core
    needs: [validate-core, build-julia]
    runs-on: ${{ matrix.os }}
    if: always() && (needs.build-julia.result == 'success' || needs.validate-core.outputs.build_required == 'false')
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        test-set: [
          "LinearAlgebra",
          "SparseArrays", 
          "Statistics",
          "Test",
          "Pkg",
          "REPL",
          "Core"
        ]
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Build Artifacts
      if: needs.validate-core.outputs.build_required == 'true'
      uses: actions/download-artifact@v4
      with:
        name: julia-build-${{ matrix.os }}-x64
    
    - name: Extract Build
      if: needs.validate-core.outputs.build_required == 'true'
      run: |
        tar -xzf julia-build-${{ matrix.os }}-x64.tar.gz
        chmod +x julia
    
    - name: Use System Julia
      if: needs.validate-core.outputs.build_required == 'false'
      uses: julia-actions/setup-julia@v2
      with:
        version: '1.10'
    
    - name: Run Core Tests
      run: |
        if [[ -f "./julia" ]]; then
          JULIA_CMD="./julia"
        else
          JULIA_CMD="julia"
        fi
        
        echo "Testing ${{ matrix.test-set }} with $JULIA_CMD"
        
        if [[ "${{ matrix.test-set }}" == "Core" ]]; then
          # Run basic core tests
          $JULIA_CMD -e 'using Test; @testset "Core Tests" begin
            @test 1 + 1 == 2
            @test typeof(1) == Int
            @test length([1,2,3]) == 3
            @test "hello" * " world" == "hello world"
          end'
        else
          # Test specific stdlib packages
          $JULIA_CMD -e "using Test, ${{ matrix.test-set }}; Test.runtests()"  || 
          $JULIA_CMD --project -e "using Pkg; Pkg.test(\"${{ matrix.test-set }}\")" ||
          $JULIA_CMD -e "using ${{ matrix.test-set }}; println(\"${{ matrix.test-set }} loaded successfully\")"
        fi

  performance-test:
    name: Performance Tests  
    needs: [validate-core, build-julia]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_suite == 'benchmarks'
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: julia-build-ubuntu-latest-x64
    
    - name: Extract Build
      run: |
        tar -xzf julia-build-ubuntu-latest-x64.tar.gz
        chmod +x julia
    
    - name: Run Performance Tests
      run: |
        ./julia -e '
        using Statistics
        
        function benchmark_basic()
            println("Running basic performance tests...")
            
            # Matrix multiplication benchmark
            n = 1000
            A = rand(n, n)
            B = rand(n, n)
            
            t1 = time()
            C = A * B
            t2 = time()
            
            matmul_time = t2 - t1
            println("Matrix multiplication ($n x $n): $(matmul_time * 1000) ms")
            
            # Fibonacci benchmark
            function fib(n)
                n <= 1 && return n
                return fib(n-1) + fib(n-2)
            end
            
            t1 = time()
            result = fib(30)
            t2 = time()
            
            fib_time = t2 - t1
            println("Fibonacci(30): $(fib_time * 1000) ms (result: $result)")
            
            # Array operations benchmark
            arr = rand(1_000_000)
            
            t1 = time()
            s = sum(arr)
            t2 = time()
            
            sum_time = t2 - t1
            println("Sum of 1M elements: $(sum_time * 1000) ms")
            
            return (matmul_time, fib_time, sum_time)
        end
        
        times = benchmark_basic()
        println("Benchmark completed successfully")
        '

  lint-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: julia-actions/setup-julia@v2
      with:
        version: '1.10'
    
    - name: Check Julia Code Style
      run: |
        julia -e '
        using Pkg
        try
            Pkg.add("JuliaFormatter")
            using JuliaFormatter
            
            # Check base/ directory formatting
            if isdir("base")
                println("Checking base/ directory formatting...")
                base_formatted = format("base", verbose=false, overwrite=false)
                if !base_formatted
                    println("Formatting issues found in base/")
                end
            end
            
            # Check stdlib/ directory formatting  
            if isdir("stdlib")
                println("Checking stdlib/ directory formatting...")
                for stdlib_pkg in readdir("stdlib")
                    stdlib_path = joinpath("stdlib", stdlib_pkg)
                    if isdir(stdlib_path) && isfile(joinpath(stdlib_path, "src"))
                        pkg_formatted = format(stdlib_path, verbose=false, overwrite=false)
                        if !pkg_formatted
                            println("Formatting issues found in stdlib/$stdlib_pkg")
                        end
                    end
                end
            end
            
            println("Code style check completed")
            
        catch e
            println("Could not run formatter: $e")
            println("Skipping format check")
        end
        '
    
    - name: Basic Syntax Validation
      run: |
        echo "Validating Julia syntax in core files..."
        
        find base stdlib -name "*.jl" | head -20 | while read file; do
          if julia -e "include(\"$file\")" 2>/dev/null; then
            echo "PASS: $file"
          else
            echo "SYNTAX ERROR: $file" 
          fi
        done

  report:
    name: Generate Test Report
    if: always()
    needs: [validate-core, build-julia, test-core, performance-test, lint-check]
    runs-on: ubuntu-latest
    steps:
    - name: Create Test Report
      run: |
        cat > julia_core_report.md << 'EOF'
        # Julia Core Testing Report
        
        **Version**: ${{ needs.validate-core.outputs.version }}
        **Timestamp**: $(date)
        **Trigger**: ${{ github.event_name }}
        
        ## Build Status
        - Validation: ${{ needs.validate-core.result }}
        - Build: ${{ needs.build-julia.result }}
        - Core Tests: ${{ needs.test-core.result }}
        - Performance: ${{ needs.performance-test.result }}
        - Code Quality: ${{ needs.lint-check.result }}
        
        ## Changes Detected
        - Core changes: ${{ needs.validate-core.outputs.build_required }}
        - Rebuild required: ${{ needs.validate-core.outputs.build_required }}
        
        EOF
        
        if [[ "${{ needs.build-julia.result }}" == "success" ]]; then
          echo "✅ Build completed successfully across platforms" >> julia_core_report.md
        else
          echo "❌ Build failed - check logs for details" >> julia_core_report.md
        fi
        
        if [[ "${{ needs.test-core.result }}" == "success" ]]; then
          echo "✅ Core tests passed" >> julia_core_report.md
        else
          echo "❌ Some core tests failed" >> julia_core_report.md
        fi
    
    - name: Upload Report
      uses: actions/upload-artifact@v4  
      with:
        name: julia-core-test-report
        path: julia_core_report.md